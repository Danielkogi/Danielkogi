# -*- coding: utf-8 -*-
"""Untitled17 (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oCJrc74kQowUK2bbfxLD-uD_KfwmLs_F
"""

#import libraries
import pandas as pd
import urllib.request, json
import numpy as np
import requests

#Defining the class
class waterPoints:
  def __init__(self,url):
    # Read data from the url
    self.url= urllib.request.urlopen(str(url))
    # Read data into a pandas daraframe.
    self.df = pd.read_json( self.url.read())
    # Filter the umber of functional water points
    self.functional =self.df['water_functioning'][self.df['water_functioning'] =="yes"]

   # Calculate the number of functional water points
  def functional_water_points (self):
    print("number_functional: " , self.functional.size)

  #Calculate number of water points per community
  def wps_community (self):
    wp= self.df.groupby("communities_villages").size()

    print("number_water_points: ")
    print()
    print(wp)

  #Rank communities by broken water points
  def broken_water_points (self):
    #filter by broken points
    flt = self.df['water_point_condition'] =="broken"
    broken_pts_df= self.df[flt]
    #Create pandas dataframe
    cbrk_df= broken_pts_df.groupby("communities_villages").size().to_frame()
    cbrk_df=cbrk_df.rename(columns={0:'Percentage_Broken_Points'})
    number_broken = cbrk_df['Percentage_Broken_Points'].sum()
    cbrk_df['Percentage_Broken_Points'] = cbrk_df['Percentage_Broken_Points'].map(lambda  x: (x/number_broken)*100)
    print()
    print("community ranking: ")
    print(cbrk_df.sort_values(ascending=False, by='Percentage_Broken_Points'))

test=waterPoints(url_string)
test.functional_water_points()
test.wps_community()
test.broken_water_points()